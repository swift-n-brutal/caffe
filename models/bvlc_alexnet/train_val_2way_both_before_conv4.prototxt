name: "AlexNet"
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    mirror: true
    crop_size: 227
    mean_file: "data/ilsvrc12/imagenet_mean.binaryproto"
  }
  data_param {
    source: "examples/imagenet/ilsvrc12_train_lmdb"
    batch_size: 256
    backend: LMDB
  }
}
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    mirror: false
    crop_size: 227
    mean_file: "data/ilsvrc12/imagenet_mean.binaryproto"
  }
  data_param {
    source: "examples/imagenet/ilsvrc12_val_lmdb"
    batch_size: 50
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
    weight_filler {
#      type: "gaussian"
#      std: 0.01
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "conv1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "norm1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
    weight_filler {
#      type: "gaussian"
#      std: 0.01
      type: "msra"
    }
    bias_filler {
      type: "constant"
#      value: 0.1
      value: 0
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "conv2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "norm2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    weight_filler {
#      type: "gaussian"
#      std: 0.01
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
#      type: "gaussian"
#      std: 0.01
      type: "msra"
    }
    bias_filler {
      type: "constant"
#      value: 0.1
      value: 0
    }
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
#layer {
#  name: "conv5"
#  type: "Convolution"
#  bottom: "conv4"
#  top: "conv5"
#  param {
#    lr_mult: 1
#    decay_mult: 1
#  }
#  param {
#    lr_mult: 2
#    decay_mult: 0
#  }
#  convolution_param {
#    num_output: 256
#    pad: 1
#    kernel_size: 3
#    group: 2
#    weight_filler {
##      type: "gaussian"
##      std: 0.01
#      type: "msra"
#    }
#    bias_filler {
#      type: "constant"
##      value: 0.1
#      value: 0
#    }
#  }
#}
#layer {
#  name: "relu5"
#  type: "ReLU"
#  bottom: "conv5"
#  top: "conv5"
#}
#layer {
#  name: "pool5"
#  type: "Pooling"
#  bottom: "conv5"
#  top: "pool5"
#  pooling_param {
#    pool: MAX
#    kernel_size: 3
#    stride: 2
#  }
#}
################################################## split
######################################### branch 0
layer {
  name: "conv5_0"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5_0"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
#      type: "gaussian"
#      std: 0.01
      type: "msra"
    }
    bias_filler {
      type: "constant"
#      value: 0.1
      value: 0
    }
  }
}
layer {
  name: "relu5_0"
  type: "ReLU"
  bottom: "conv5_0"
  top: "conv5_0"
}
layer {
  name: "pool5_0"
  type: "Pooling"
  bottom: "conv5_0"
  top: "pool5_0"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "fc6_0"
  type: "InnerProduct"
  bottom: "pool5_0"
  top: "fc6_0"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
#      type: "gaussian"
#      std: 0.005
      type: "msra"
      max: 4
    }
    bias_filler {
      type: "constant"
#      value: 0.1
      value: 0
    }
  }
}
layer {
  name: "relu6_0"
  type: "ReLU"
  bottom: "fc6_0"
  top: "fc6_0"
}
layer {
  name: "drop6_0"
  type: "Dropout"
  bottom: "fc6_0"
  top: "fc6_0"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7_0"
  type: "InnerProduct"
  bottom: "fc6_0"
  top: "fc7_0"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
#      type: "gaussian"
#      std: 0.005
      type: "msra"
      max: 4
    }
    bias_filler {
      type: "constant"
#      value: 0.1
      value: 0
    }
  }
}
layer {
  name: "relu7_0"
  type: "ReLU"
  bottom: "fc7_0"
  top: "fc7_0"
}
layer {
  name: "drop7_0"
  type: "Dropout"
  bottom: "fc7_0"
  top: "fc7_0"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc8_0"
  type: "InnerProduct"
  bottom: "fc7_0"
  top: "fc8_0"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1000
    weight_filler {
#      type: "gaussian"
#      std: 0.01
      type: "msra"
      max: 4
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
######################################### branch 1
layer {
  name: "conv5_1"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
#      type: "gaussian"
#      std: 0.01
      type: "msra"
    }
    bias_filler {
      type: "constant"
#      value: 0.1
      value: 0
    }
  }
}
layer {
  name: "relu5_1"
  type: "ReLU"
  bottom: "conv5_1"
  top: "conv5_1"
}
layer {
  name: "pool5_1"
  type: "Pooling"
  bottom: "conv5_1"
  top: "pool5_1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "fc6_1"
  type: "InnerProduct"
  bottom: "pool5_1"
  top: "fc6_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
#      type: "gaussian"
#      std: 0.005
      type: "msra"
      max: 4
    }
    bias_filler {
      type: "constant"
#      value: 0.1
      value: 0
    }
  }
}
layer {
  name: "relu6_1"
  type: "ReLU"
  bottom: "fc6_1"
  top: "fc6_1"
}
layer {
  name: "drop6_1"
  type: "Dropout"
  bottom: "fc6_1"
  top: "fc6_1"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7_1"
  type: "InnerProduct"
  bottom: "fc6_1"
  top: "fc7_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
#      type: "gaussian"
#      std: 0.005
      type: "msra"
      max: 4
    }
    bias_filler {
      type: "constant"
#      value: 0.1
      value: 0
    }
  }
}
layer {
  name: "relu7_1"
  type: "ReLU"
  bottom: "fc7_1"
  top: "fc7_1"
}
layer {
  name: "drop7_1"
  type: "Dropout"
  bottom: "fc7_1"
  top: "fc7_1"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc8_1"
  type: "InnerProduct"
  bottom: "fc7_1"
  top: "fc8_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1000
    weight_filler {
#      type: "gaussian"
#      std: 0.01
      type: "msra"
      max: 4
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
######################################### selection scores
layer {
  name: "conv5_s"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5_s"
  param {
    lr_mult: 0.0001
    decay_mult: 1
  }
  param {
    lr_mult: 0.0002
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
#      type: "gaussian"
#      std: 0.01
      type: "msra"
    }
    bias_filler {
      type: "constant"
#      value: 0.1
      value: 0
    }
  }
}
layer {
  name: "relu5_s"
  type: "ReLU"
  bottom: "conv5_s"
  top: "conv5_s"
}
layer {
  name: "pool5_s"
  type: "Pooling"
  bottom: "conv5_s"
  top: "pool5_s"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "fc6_s"
  type: "InnerProduct"
  bottom: "pool5_s"
  top: "fc6_s"
  param {
    lr_mult: 0.0001
    decay_mult: 1
  }
  param {
    lr_mult: 0.0002
    decay_mult: 0
  }
  inner_product_param {
    num_output: 2048
    weight_filler {
#      type: "gaussian"
#      std: 0.005
      type: "msra"
      max: 4
    }
    bias_filler {
      type: "constant"
#      value: 0.1
      value: 0
    }
  }
}
layer {
  name: "relu6_s"
  type: "ReLU"
  bottom: "fc6_s"
  top: "fc6_s"
}
layer {
  name: "drop6_s"
  type: "Dropout"
  bottom: "fc6_s"
  top: "fc6_s"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7_s"
  type: "InnerProduct"
  bottom: "fc6_s"
  top: "fc7_s"
  param {
    lr_mult: 0.0001
    decay_mult: 1
  }
  param {
    lr_mult: 0.0002
    decay_mult: 0
  }
  inner_product_param {
    num_output: 2048
    weight_filler {
#      type: "gaussian"
#      std: 0.005
      type: "msra"
      max: 4
    }
    bias_filler {
      type: "constant"
#      value: 0.1
      value: 0
    }
  }
}
layer {
  name: "relu7_s"
  type: "ReLU"
  bottom: "fc7_s"
  top: "fc7_s"
}
layer {
  name: "drop7_s"
  type: "Dropout"
  bottom: "fc7_s"
  top: "fc7_s"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc8_s"
  type: "InnerProduct"
  bottom: "fc7_s"
  top: "fc8_s"
  param {
    lr_mult: 0.0001
    decay_mult: 1
  }
  param {
    lr_mult: 0.0002
    decay_mult: 0
  }
  inner_product_param {
    num_output: 2
    weight_filler {
#      type: "gaussian"
#      std: 0.01
      type: "msra"
      max: 4
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
######################################### join in
layer {
  name: "softmax_scale"
  type: "Softmax"
  bottom: "fc8_s"
  top: "scores"
}
layer {
  name: "slice_scores"
  type: "Slice"
  bottom: "scores"
  top: "score_0"
  top: "score_1"
}
layer {
  name: "flatten_s0"
  type: "Flatten"
  bottom: "score_0"
  top: "score_f_0"
  flatten_param {
    axis: 0
  }
}
layer {
  name: "flatten_s1"
  type: "Flatten"
  bottom: "score_1"
  top: "score_f_1"
  flatten_param {
    axis: 0
  }
}
layer {
  name: "scale_0"
  type: "Scale"
  bottom: "fc8_0"
  bottom: "score_f_0"
  top: "fc8_0_scaled"
  scale_param {
    axis: 0
  }
}
layer {
  name: "scale_1"
  type: "Scale"
  bottom: "fc8_1"
  bottom: "score_f_1"
  top: "fc8_1_scaled"
  scale_param {
   axis: 0
  }
}
layer {
  name: "elt_sum"
  type: "Eltwise"
  bottom: "fc8_0_scaled"
  bottom: "fc8_1_scaled"
  top: "fc8_sum"
}
layer {
  name: "softmax"
  type: "SoftmaxWithLoss"
  bottom: "fc8_sum"
  bottom: "label"
  top: "loss"
}
layer {
  name: "accuracy/top1"
  type: "Accuracy"
  bottom: "fc8_sum"
  bottom: "label"
  top: "accuracy/top1"
  accuracy_param {
    top_k: 1
  }
}
layer {
  name: "accuracy/top5"
  type: "Accuracy"
  bottom: "fc8_sum"
  bottom: "label"
  top: "accuracy/top5"
  accuracy_param {
    top_k: 5
  }
}
layer {
  name: "max_id"
  type: "ArgMax"
  bottom: "fc8_s"
  top: "max_id"
}
layer {
  name: "mean_max_id"
  type: "Reduction"
  bottom: "max_id"
  top: "mean_max_id"
  reduction_param {
    operation: MEAN
  }
}
